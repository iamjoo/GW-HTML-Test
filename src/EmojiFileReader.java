import java.io.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public final class EmojiFileReader {

  public static void main(String[] args) throws IOException {
    FileReader fileReader = new FileReader(new File("emoji-test.txt"));
    BufferedReader bufferedReader = new BufferedReader(fileReader);
    String line = bufferedReader.readLine();
    StringBuilder sb = new StringBuilder();

    Pattern categoryPattern = Pattern.compile("(.* group: )(?<category>.*)");

    // The first capture group is the text up to and including " fully-qualified". The leading space
    // is there to exclude entries containing "non-fully-qualified".
    // The second capture group contains everything up to "# ". Note the trailing space.
    // The third capture group is the emoji itself. It only captures the first one if there are two
    // or more. This capture group has been named emoji.
    // The fourth capture group contains all non-whitespace characters followed by a space. This
    // group captures all emoji, if any, after the first one.
    // The fifth and last capture group is the remaining text. This group has been named
    // description.
    Pattern fullyQualifiedPattern = Pattern.compile("(.* fully-qualified)(.*# )(?<emoji>.?)(\\S* )(?<description>.*)");

//    smileys: {
//      displayName: 'Smileys & People',
//      emojis: [...],
//    },
//    animals: {
//      ...
//    }

    // Starts the entire map/object.
    sb.append("{\n");

    while (line != null) {
      Matcher categoryMatcher = categoryPattern.matcher(line);

      if (categoryMatcher.matches()) {
        String category = categoryMatcher.group("category");
        if (sb.length() > 4) {
          // Closes the previous emojis array.
          sb.append("    ]\n");

          // Closes the previous object.
          sb.append("  },\n");
        }

        // Sets the key of the new object. Starts the new object.
        sb.append("  " + normalCaseToLower(category) + ": {\n");

        // Creates the displayName property of the new object. Adds the category as the property.
        // Adds a trailing comma for the next property.
        sb.append("    displayName: '" + category + "',\n");

        // Creates the emojis property of the new object. Starts the array.
        sb.append("    emojis: [\n");
        line = bufferedReader.readLine();
        continue;
      }

      Matcher emojiMatcher = fullyQualifiedPattern.matcher(line);
      if (emojiMatcher.matches()) {
        sb.append("      ");
        sb.append(createEmoji(emojiMatcher.group("emoji"), emojiMatcher.group("description")));
        sb.append(",\n");
        line = bufferedReader.readLine();
        continue;
      }

      line = bufferedReader.readLine();
    }

    // Closes the last emojis array.
    sb.append("    ]\n");

    // Closes the last object.
    sb.append("  }\n");

    // Closes the entire map/object.
    sb.append("}");
    fileReader.close();
    writeToFile(sb.toString());
  }

  /**
   * Creates a JS object literal that has a property for the emoji and its description.
   */
  private static String createEmoji(String emoji, String description) {
    return new StringBuffer()
        .append("{")
        .append("emoji: " + emoji + ", ")
        .append("description: '" + description.trim() + "'")
        .append("}")
        .toString();
  }

  private static void writeToFile(String outputToWrite) throws IOException {
    FileWriter fileWriter = new FileWriter(new File("output.txt"));
    fileWriter.write("// File generated by EmojiFileReader.java\n");
    fileWriter.write("// DO NOT EDIT\n\n");
    fileWriter.write(outputToWrite);
    fileWriter.write("\n");
    fileWriter.flush();
    fileWriter.close();
  }

  /**
   * Takes in a phrase and returns the first word in lower case.
   */
  private static String normalCaseToLower(String phrase) {
    return phrase.split("\\s+")[0].toLowerCase();
  }
}
