import java.io.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public final class EmojiFileReader {

  public static void main(String[] args) throws FileNotFoundException, IOException {
    FileReader fileReader = new FileReader(new File("emoji-test.txt"));
    BufferedReader bufferedReader = new BufferedReader(fileReader);
    String line = bufferedReader.readLine();
    StringBuilder sb = new StringBuilder();

    Pattern groupPattern = Pattern.compile("(.* group: )(?<group>.*)");
    Pattern fullyQualifiedPattern = Pattern.compile("(.* fully-qualified)(.*# )(?<emoji>.?)(.?)(?<description>.*)");

//    smileys: {
//      displayName: 'Smileys & People',
//      emojis: [...],
//    },
//    animals: {
//      ...
//    }

    // Starts the entire map/object.
    sb.append("{\n");

    while (line != null) {
      Matcher groupMatcher = groupPattern.matcher(line);

      if (groupMatcher.matches()) {
        String group = groupMatcher.group("group");
        if (sb.length() > 4) {
          // Closes the previous emojis array.
          sb.append("]\n");

          // Closes the previous object.
          sb.append("  },\n");
        }

        // Sets the key of the new object. Starts the new object.
        sb.append("  " + normalCaseToLower(group) + ": {\n");

        // Creates the displayName property of the new object. Adds the group as the property.
        // Adds a trailing comma for the next property.
        sb.append("    displayName: '" + group + "',\n");

        // Creates the emojis property of the new object. Starts the array.
        sb.append("    emojis: [");
        line = bufferedReader.readLine();
        continue;
      }

      Matcher emojiMatcher = fullyQualifiedPattern.matcher(line);
      if (emojiMatcher.matches()) {
        sb.append(emojiMatcher.group("emoji"));
        sb.append(", ");
      }

      line = bufferedReader.readLine();
    }

    // Closes the last emojis array.
    sb.append("]\n");

    // Closes the last object.
    sb.append("  }\n");

    // Closes the entire map/object.
    sb.append("}");
    fileReader.close();
    writeToFile(sb.toString());
  }

  private static void writeToFile(String outputToWrite) throws IOException{
    FileWriter fileWriter = new FileWriter(new File("output.txt"));
    fileWriter.write("// File generated by EmojiFileReader.java\n");
    fileWriter.write("// DO NOT EDIT\n");
    fileWriter.write(outputToWrite);
    fileWriter.write("\n");
    fileWriter.flush();
    fileWriter.close();
  }

  /**
   * Takes in a phrase and returns the first word in lower case.
   */
  private static String normalCaseToLower(String phrase) {
    return phrase.split("\\s+")[0].toLowerCase();
  }
}
